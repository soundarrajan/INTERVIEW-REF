// auth.interceptor.ts
import { Injectable } from '@angular/core';
import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AuthService } from './auth.service';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  constructor(private authService: AuthService) {}

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    const authToken = this.authService.getToken();
    if (authToken) {
      const cloned = req.clone({
        headers: req.headers.set('Authorization', `Bearer ${authToken}`),
      });
      return next.handle(cloned);
    }
    return next.handle(req);
  }
}
------------------------
// auth.service.ts
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private token: string;

  constructor(private http: HttpClient) {}

  login(credentials: any) {
    return this.http.post('https://api.example.com/login', credentials)
      .subscribe((response: any) => {
        this.token = response.token;
      });
  }

  getToken(): string {
    return this.token;
  }

  isAuthenticated(): boolean {
    return !!this.token;
  }
}

// api.service.ts
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root',
})
export class ApiService {
  constructor(private http: HttpClient, private authService: AuthService) {}

  getData() {
    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.authService.getToken()}`);
    return this.http.get('https://api.example.com/data', { headers });
  }
}

------------------
Create an HTTP Interceptor
Next, create an interceptor to add the authorization token to outgoing HTTP requests.

typescript
Copy code
// auth.interceptor.ts
import { Injectable } from '@angular/core';
import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AuthService } from './auth.service';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  constructor(private authService: AuthService) {}

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    const authToken = this.authService.getToken();
    if (authToken) {
      const cloned = req.clone({
        headers: req.headers.set('Authorization', `Bearer ${authToken}`),
      });
      return next.handle(cloned);
    }
    return next.handle(req);
  }
}
-------
// auth.interceptor.ts
import { Injectable } from '@angular/core';
import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { AuthService } from './auth.service';
import { catchError, switchMap } from 'rxjs/operators';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  constructor(private authService: AuthService) {}

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    const authToken = this.authService.getToken();
    let authReq = req;

    if (authToken) {
      authReq = req.clone({
        headers: req.headers.set('Authorization', `Bearer ${authToken}`),
      });
    }

    return next.handle(authReq).pipe(
      catchError((error: HttpErrorResponse) => {
        if (error.status === 401) {
          // Attempt to refresh the token
          return this.authService.refreshToken().pipe(
            switchMap((newToken: string) => {
              this.authService.saveToken(newToken);
              const newAuthReq = req.clone({
                headers: req.headers.set('Authorization', `Bearer ${newToken}`),
              });
              return next.handle(newAuthReq);
            }),
            catchError((err) => {
              this.authService.removeToken();
              return throwError(err);
            })
          );
        }
        return throwError(error);
      })
    );
  }
}
--------------
JWT (JSON Web Token) authentication is a common method for securing Angular applications. It involves the following steps:

User Login: The user logs in by providing credentials (e.g., username and password).
Server Authentication: The server authenticates the user and issues a JWT if the credentials are valid.
Token Storage: The JWT is stored on the client-side (usually in localStorage or sessionStorage).
Token Usage: For each subsequent request, the JWT is included in the HTTP headers to authenticate the user.
Token Validation: The server validates the token for each request to ensure the user is authorized to access the requested resource.
Here is a step-by-step guide to implementing JWT authentication in an Angular application:

Step 1: Set Up the Backend
Assuming you have a backend that issues JWTs, here's an example using Node.js and Express:

Install required packages:

sh
Copy code
npm install express jsonwebtoken body-parser
Create a simple Express server (server.js):

javascript
Copy code
const express = require('express');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

const users = [{ username: 'user1', password: 'password1' }];
const SECRET_KEY = 'your_secret_key';

app.post('/login', (req, res) => {
  const { username, password } = req.body;
  const user = users.find(u => u.username === username && u.password === password);

  if (user) {
    const token = jwt.sign({ username: user.username }, SECRET_KEY, { expiresIn: '1h' });
    res.json({ token });
  } else {
    res.status(401).send('Invalid credentials');
  }
});

app.get('/protected', (req, res) => {
  const token = req.headers['authorization'];
  if (token) {
    jwt.verify(token, SECRET_KEY, (err, decoded) => {
      if (err) {
        return res.status(401).send('Invalid token');
      }
      res.json({ message: 'This is a protected route', user: decoded });
    });
  } else {
    res.status(401).send('No token provided');
  }
});

app.listen(3000, () => console.log('Server running on http://localhost:3000'));
Step 2: Create the Angular Application
Install Angular and create a new project:

sh
Copy code
ng new jwt-auth-demo
cd jwt-auth-demo
Install the HTTP client module:

sh
Copy code
ng add @angular/common/http
Create a service to handle authentication (auth.service.ts):

typescript
Copy code
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private baseUrl = 'http://localhost:3000';

  constructor(private http: HttpClient) {}

  login(username: string, password: string): Observable<void> {
    return this.http.post<{ token: string }>(`${this.baseUrl}/login`, { username, password })
      .pipe(map(response => {
        localStorage.setItem('token', response.token);
      }));
  }

  logout(): void {
    localStorage.removeItem('token');
  }

  getToken(): string | null {
    return localStorage.getItem('token');
  }
}
Create an HTTP interceptor to add the JWT to requests (auth-interceptor.service.ts):

typescript
Copy code
import { Injectable } from '@angular/core';
import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AuthService } from './auth.service';

@Injectable()
export class AuthInterceptor implements HttpInterceptor {

  constructor(private authService: AuthService) {}

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    const token = this.authService.getToken();
    if (token) {
      const cloned = req.clone({
        headers: req.headers.set('Authorization', token)
      });
      return next.handle(cloned);
    } else {
      return next.handle(req);
    }
  }
}
Register the interceptor in the app module (app.module.ts):

typescript
Copy code
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';

import { AppComponent } from './app.component';
import { AuthService } from './auth.service';
import { AuthInterceptor } from './auth-interceptor.service';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    HttpClientModule
  ],
  providers: [
    AuthService,
    {
      provide: HTTP_INTERCEPTORS,
      useClass: AuthInterceptor,
      multi: true
    }
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }
Create a simple login component (login.component.ts):

typescript
Copy code
import { Component } from '@angular/core';
import { AuthService } from './auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  template: `
    <form (ngSubmit)="login()">
      <div>
        <label for="username">Username</label>
        <input type="text" [(ngModel)]="username" name="username" required>
      </div>
      <div>
        <label for="password">Password</label>
        <input type="password" [(ngModel)]="password" name="password" required>
      </div>
      <button type="submit">Login</button>
    </form>
  `
})
export class LoginComponent {
  username: string = '';
  password: string = '';

  constructor(private authService: AuthService, private router: Router) {}

  login() {
    this.authService.login(this.username, this.password).subscribe(() => {
      this.router.navigate(['/protected']);
    });
  }
}
Create a protected component (protected.component.ts):

typescript
Copy code
import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-protected',
  template: '<p>{{ message }}</p>'
})
export class ProtectedComponent {
  message: string = '';

  constructor(private http: HttpClient) {
    this.http.get<{ message: string }>('http://localhost:3000/protected').subscribe(response => {
      this.message = response.message;
    });
  }
}
Update the app routing module (app-routing.module.ts):

typescript
Copy code
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LoginComponent } from './login.component';
import { ProtectedComponent } from './protected.component';

const routes: Routes = [
  { path: 'login', component: LoginComponent },
  { path: 'protected', component: ProtectedComponent },
  { path: '', redirectTo: '/login', pathMatch: 'full' }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
This setup provides a basic JWT authentication system in an Angular application, where users can log in, store the JWT, and use it for accessing protected resources.
---------