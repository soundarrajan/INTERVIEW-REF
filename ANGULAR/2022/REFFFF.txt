DATA BINDING:
 to manipulate Web page elements using a Web browser.

Data binding automatically keeps your page up-to-date based on your application's state.
Data binding in AngularJS is the synchronization between the model and the view. 
When data in the model changes, the view reflects the change, and when data in the view changes, 
the model is updated as well.

attributes and properties:
html attributes, dom properties:

1. The HTML attribute value specifies the initial value; the DOM value property is the current value.

<button disabled="false">Still Disabled</button>.
<input [disabled]="condition ? true : false">

------
TYPES OF DATA BINDING:

From source to view  - INTERPOLATION - {{expression}} [target]="expression"
From view to source - EVENT - (target)="statement"
In a two-way sequence of view to source to view - [(target)]="expression"
--------
Typescript:
Optional static typing::
javascript: dynamically typed language which means that the types are checked, 
and datatype errors are spotted only at the runtime.
TS: TypeScript introduces optional strong static typing: Once declared, a variable doesnâ€™t change 
its type and can take only certain values. The compiler alerts developers to type-related mistakes, 
so they have no opportunity to hit the production phase.
Rich IDE support::
Fast refactoring::
TypeScript supports concepts from class-based object-oriented programming (OOP):
----
Directives:
add new behavior to the elements in the template or modify existing behavior.
Component Directive
Structural Directive - *ngIf ngfor
Attribute directive -  ngStyle( applying styles) or ngClass(applying CSS classes).
-------
Decorator:

Angular decorators is to store metadata about a class, method, or property. 
When you configure a component, you are providing a metadata for that class that tells 
Angular that you have a component, and that component has a specific configuration.

Class Decorators - @component
Property Decorators - @input, @output
Method Decorators - @hostlistner
Parameter Decorators - @inject
-----------
changedetectionstategy , https://web.dev/faster-angular-change-detection/
https://angular-training-guide.rangle.io/change-detection/enforcing_immutability

when make changes in parent, it traverse and update dom in child component level.
so low performance.

changedetectionstategy.onpush:
it remove the changedetection event to all child level component.
changedetectionstategy.push in child remove change detection when parent changed.
but changes in child not worked.
to activate , use changedetectionref and markforcheck

and also changes in input property from parent not changed in child , if use changedetectionstategy.onpush
for example pass an object as input and change a poperty on click in parent, not changed in child.
bcoz, refrence not changed , only property changed.
to solve:
test ={name:'ss'}

clich(){
    const c = {...this.course};
    c.name='sss';
    this.test = c;
}

or use observable(with changedetectorref and markforcheck or async)

https://github.com/ayyanarjayabalan/changedetectionstrategy
------------------------------
Pipes:
Pipes are simple functions designed to accept an input value, process, and return as an output,

pure pipes:
execute when it detects a pure change in the input value(change in primitive value or object reference)

impure-pipe works for every change in the component
pure-pipe works only when the component is loaded.

------------------
change detectiontechniques:

1) impure pipe: chance to performance issues.
in add and filter function in list:

2) get:
Getters are special functions that will update their values whenever they're called. It's very simple to use.

get todos() { return this.todoService.getAll(); }
*ngFor="let todo of todos"

  get uncompletedTodos() { 
    return this.todoService.GetUncompleted();
  }

  https://stackblitz.com/edit/angular-uttpfg?file=src%2Fapp%2Ffooter%2Ffooter.component.ts


  3) RxJS.
  This is an event solution : when your list is getting updated, you have to trigger an event. 

service:::
private rowSelected = new BehaviorSubject<any>(false);
isRowSelected = this.rowSelected.asObservable();
 updateRowSelected(c) {
        this.rowSelected.next(c);
    }

    to update:::
    this.localService.updateRowSelected(false);

    to get value:::
      this.localService.isRowSelected.subscribe(data => {
        this.rowSelected = data;
      });

      ________________________________
  // Create a subject : this will allow you to propagate an update event.
  // Private because you will only use it in your service. 
 .......       private todoListChange = new Subject();
  // From the subject, create an observable that will be observed by your components. 
  // When you write todoListChange.next(), the observable will emit a new event. 
  // This new event can be catched with a subscription, as you can see in the components. 
   ......     public todoListChanged$ = this.todoListChange.asObservable();
.........

        this.todoListChange.next(); // should call, at where the update events happens.this update subscription.
..........
constructor(private todoService: TodoService) {
    //Get all todos
    //this.setTodos();
    // Everytime the list changes, update the list
    this.todoService.todoListChanged$.subscribe(() => this.setTodos());
  }

   setTodos() {
    this.todos = this.todoService.GetAll();
  }

..........................

4)  set..........

  @Input()
  set size(val: number) {
    this._size = val;
    this.pages = this.calcPages();
  }

  get size(): number {
    return this._size;
  }
------
  private _a: any;

    set a(value: any){
        this._a = value;

        // Let the world know, I have changed
        this.someMethod();
    }

    someMethod() {
        // Possibly a POST API call
    }

    ---------------------
5) ng on changes:

ngOnChanges(changes: SimpleChanges) {
  for (const propName in changes) {
    if (changes.hasOwnProperty(propName)) {
      switch (propName) {
        case 'myFirstInputParameter': {
          this.doSomething(change.currentValue)
        }
      }
    }
  }
}

replace:::

@Input()
set myFirstInputParameter(val) {
  this.doSomething(val)
}
----------
private _currencyValue;
private currencyConversion = 75.6

@Input()
set currencyValue(val) {
  this._currencyValue = val * this.currencyConversion
}
get currencyValue(val) {
  return this._currencyValue
}
-----------
https://andrew-morozw.medium.com/using-getters-and-setters-in-typescript-and-angular-d478829461c8
--------------------------------------------------------------------------------------------
push vs concat

push change the array not refrence
concat create new array with merge two array
--------------
view encapsulation:
View encapsulation defines whether the template and styles defined within the component 
can affect the whole application or vice versa.
-----------
Modules:

defines a workflow ,organize an application
contains components, export, import , service providers.
lazy load a module
@NgModule takes a metadata object that describes how to compile a component's 
template and how to create an injector at runtime.
-----------