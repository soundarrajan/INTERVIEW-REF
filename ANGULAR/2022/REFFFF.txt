DATA BINDING:
 to manipulate Web page elements using a Web browser.

Data binding automatically keeps your page up-to-date based on your application's state.
Data binding in AngularJS is the synchronization between the model and the view. 
When data in the model changes, the view reflects the change, and when data in the view changes, 
the model is updated as well.

attributes and properties:
html attributes, dom properties:
attributes are defined by HTML. Properties are defined by the DOM.
The value of an attribute is constant.	The value of a property is variable.

1. The HTML attribute value specifies the initial value; the DOM value property is the current value.

<button disabled="false">Still Disabled</button>.
<input [disabled]="condition ? true : false">

------
TYPES OF DATA BINDING:

From source to view  - INTERPOLATION - {{expression}} [target]="expression"
From view to source - EVENT - (target)="statement"
In a two-way sequence of view to source to view - [(target)]="expression"

two types of data binding:
Event binding	Lets your application respond to user input in the target environment by updating your 
application data.
Property binding	Lets you interpolate values that are computed from your application data into the HTML.
--------
Typescript:
Optional static typing::
javascript: dynamically typed language which means that the types are checked, 
and datatype errors are spotted only at the runtime.

Detecting errors in code without running it is referred to as static checking. 

TypeScript uses compile time type checking

TS: TypeScript introduces optional strong static typing: Once declared, a variable doesnâ€™t change 
its type and can take only certain values. The compiler alerts developers to type-related mistakes, 
so they have no opportunity to hit the production phase.
Rich IDE support::
Fast refactoring::
TypeScript supports concepts from class-based object-oriented programming (OOP):



@ts-check:
Add above in your JS code, to show errors like TS.

Casting is the process of overriding a type.
Casting with "as"
let x: unknown = 'hello';
console.log((x as string).length);

null coalescing ?? used to check null
non-null assertion operator
null assertion !

Type Inference in TypeScript
TypeScript is a typed language. However, it is not mandatory to specify the type of a variable

Type Assertion
Type assertion tells the compiler about the type of the variable

<Typename>expression;

let name:any="Scaler";
let companyname=<string>name;
console.log(typeof(comapanyname));

TypeScript Generics is a tool which provides a way to create reusable components. 
It creates a component that can work with a variety of data types rather than a single data type.

function identity<T>(arg: T): T {    
    return arg;    
}    
let output1 = identity<string>("myString");    
let output2 = identity<number>( 100 );  
----
Directives:
add new behavior to the elements in the template or modify existing behavior.
Component Directive
Structural Directive - *ngIf ngfor ngSwitch
Attribute directive -  ngStyle( applying styles) or ngClass(applying CSS classes).
-------
Decorator:

Angular decorators is to store metadata about a class, method, or property. 
When you configure a component, you are providing a metadata for that class that tells 
Angular that you have a component, and that component has a specific configuration.

Decorators are functions that modify JavaScript classes. Angular defines a number of decorators that 
attach specific kinds of metadata to classes, so that the system knows what those classes mean and 
how they should work.

Class Decorators - @component, @NgModule.
Property Decorators - @input, @output
Method Decorators - @hostlistner
Parameter Decorators - @inject
-----------
changedetectionstategy , https://web.dev/faster-angular-change-detection/
https://angular-training-guide.rangle.io/change-detection/enforcing_immutability
https://www.digitalocean.com/community/tutorials/angular-change-detection-strategy

Change Detection means updating the view (DOM) when the data has changed

when make changes in parent, it traverse and update dom in child component level.
so low performance.

changedetectionstategy.onpush:
it remove the changedetection event to all child level component.
changedetectionstategy.push in child remove change detection when parent changed.
but changes in child not worked.
to activate , use changedetectionref and markforcheck

and also changes in input property from parent not changed in child , if use changedetectionstategy.onpush
for example pass an object as input and change a poperty on click in parent, not changed in child.
bcoz, refrence not changed , only property changed.
to solve:
test ={name:'ss'}

clich(){
    const c = {...this.course};
    c.name='sss';
    this.test = c;
}

or use observable(with changedetectorref and markforcheck or async)

https://github.com/ayyanarjayabalan/changedetectionstrategy
------------------------------
Pipes:
Pipes are simple functions designed to accept an input value, process, and return as an output,

pure pipes:
execute when it detects a pure change in the input value(change in primitive value or object reference)

impure-pipe works for every change in the component
pure-pipe works only when the component is loaded.

------------------
change detectiontechniques:

1) impure pipe: chance to performance issues.
in add and filter function in list:

2) get::
Getters are special functions that will update their values whenever they're called. It's very simple to use.

get todos() { return this.todoService.getAll(); }
*ngFor="let todo of todos"

  get uncompletedTodos() { 
    return this.todoService.GetUncompleted();
  }

  https://stackblitz.com/edit/angular-uttpfg?file=src%2Fapp%2Ffooter%2Ffooter.component.ts


  3) RxJS.
  This is an event solution : when your list is getting updated, you have to trigger an event. 

service:::
private rowSelected = new BehaviorSubject<any>(false);
isRowSelected = this.rowSelected.asObservable();
 updateRowSelected(c) {
        this.rowSelected.next(c);
    }

    to update:::
    this.localService.updateRowSelected(false);

    to get value:::
      this.localService.isRowSelected.subscribe(data => {
        this.rowSelected = data;
      });

      ________________________________
  // Create a subject : this will allow you to propagate an update event.
  // Private because you will only use it in your service. 
 .......       private todoListChange = new Subject();
  // From the subject, create an observable that will be observed by your components. 
  // When you write todoListChange.next(), the observable will emit a new event. 
  // This new event can be catched with a subscription, as you can see in the components. 
   ......     public todoListChanged$ = this.todoListChange.asObservable();
.........

        this.todoListChange.next(); // should call, at where the update events happens.this update subscription.
..........
constructor(private todoService: TodoService) {
    //Get all todos
    //this.setTodos();
    // Everytime the list changes, update the list
    this.todoService.todoListChanged$.subscribe(() => this.setTodos());
  }

   setTodos() {
    this.todos = this.todoService.GetAll();
  }

..........................
to find changes in input property:(ngonchanges , set-get)
In Angular, components often receive input data through input properties. Traditionally, 
developers have relied on the ngOnChanges lifecycle hook to detect changes in these input properties.

4)  set..........

  @Input()
  set size(val: number) {
    this._size = val;
    this.pages = this.calcPages();
  }

  get size(): number {
    return this._size;
  }
------
  private _a: any;

    set a(value: any){
        this._a = value;

        // Let the world know, I have changed
        this.someMethod();
    }

    someMethod() {
        // Possibly a POST API call
    }

    ---------------------
5) ng on changes:

ngOnChanges(changes: SimpleChanges) {
  for (const propName in changes) {
    if (changes.hasOwnProperty(propName)) {
      switch (propName) {
        case 'myFirstInputParameter': {
          this.doSomething(change.currentValue)
        }
      }
    }
  }
}

replace:::

@Input()
set myFirstInputParameter(val) {
  this.doSomething(val)
}
----------
private _currencyValue;
private currencyConversion = 75.6

@Input()
set currencyValue(val) {
  this._currencyValue = val * this.currencyConversion
}
get currencyValue(val) {
  return this._currencyValue
}
-----------
<app-trade-notes [tradeNotes]="tradeNotes">
 public tradeNotes:any;
  @Input('tradeNotes') set _tradeNotes(val) {
    this.tradeNotes = val;
  }

-------------------
https://andrew-morozw.medium.com/using-getters-and-setters-in-typescript-and-angular-d478829461c8
https://blog.bitsrc.io/simplify-input-property-handling-in-angular-with-setters-and-getters-256ddca84ac1
--------------------------------------------------------------------------------------------
push vs concat

push change the array not refrence
concat create new array with merge two array
--------------
view encapsulation:
View encapsulation defines whether the template and styles defined within the component 
can affect the whole application or vice versa.

Emulated - styles from the main HTML propagate to the component.
Native - styles from the main HTML do not propagate to the component. 
None - styles from the component propagate back to the main HTML and therefore are visible 
to all components on the page.
-----------
Modules:

defines a workflow ,organize an application
contains components, export, import , service providers.
lazy load a module
@NgModule takes a metadata object that describes how to compile a component's 
template and how to create an injector at runtime.
-----------
Life cycle hooks :
https://www.stackchief.com/blog/ngDoCheck%20Example%20%7C%20Angular
every component has a lifecycle. 
Angular creates and renders these components and also destroys them before removing them from the DOM. 
This is achieved with the help of lifecycle hooks. 

ngOnChanges: When an input/output binding value changes.
ngOnInit: After the first ngOnChanges.
ngDoCheck: Developer's custom change detection...whenever change detection is run(obejct or array property value changes, not reference)
ngAfterContentInit: After component content initialized.
ngAfterContentChecked: After every check of component content.
ngAfterViewInit: After a component's views are initialized.
ngAfterViewChecked: After every check of a component's views.
ngOnDestroy: Just before the component/directive is destroyed.
-----------
services:
For data or logic that isn't associated with a specific view, and that you want to share across components, 
you create a service class. A service class definition is immediately preceded by the @Injectable() decorator.

Dependency injection (DI) lets you keep your component classes lean and efficient. 
They don't fetch data from the server, validate user input, or log directly to the console; 
they delegate such tasks to services.
------------
content projection:
-----------
forms
reactive forms
-----------
compiler:
Ahead of Time (AOT) compilation converts your code during the build time before the browser downloads 
and runs that code. This ensures faster rendering to the browser

The Just-in-Time (JIT) compilation process is a way of compiling computer code to machine code 
during execution or run time. It is also known as dynamic compilation. 
JIT compilation is the default when you run the ng build or ng serve CLI commands. 

process:
code analysis
code generation
template type checking
-------------
Rendering engine:
transforming Angular component templates into JavaScript 

View Engine is responsible for compiling the components so that they can be consumed by the browser. 
In Angular, we write our components using TypeScript and it cannot be run directly in browsers and 
for this purpose we require View Engines 

Tree Shaking
Tree Shaking is a process to remove dead code from the bundle. 


View Engine and Ivy

IVY:
reduce bundle size
faster compilation
treeshaking
incremental DOM
----------------
Virtual DOM and Incremental DOM
https://blog.nrwl.io/understanding-angular-ivy-incremental-dom-and-virtual-dom-243be844bf36

How Virtual DOM Works
Every component creates a new virtual DOM tree every time it gets rerendered. 
React compares the new virtual DOM tree with the old one and then applies a series of 
transformations to the browser DOM to match the new virtual DOM tree.

Incremental DOM
Every component gets compiled into a series of instructions. 
These instructions create DOM trees and update them in-place when the data changes.

-----------
Promises and Observables

While both the concepts deal with Asynchronous events in Angular, 
Promises handle one such event at a time while observables handle a sequence of events over some time. 

Promises - They emit a single value at a time. They execute immediately after creation and are not cancellable. 
They are Push errors to the child promises. 

Observables - They are only executed when subscribed to them using the subscribe() method. 
They emit multiple values over a period of time. They help perform operations like forEach, filter, 
and retry, among others.
_____________________
async await
async fetchData() {
    this.message = "Fetching..";
    this.response = "";
    this.response = await this.httpClient
      .get<any>(this.apiURL)
      .pipe(delay(1000))
      .toPromise();
    this.message = "Fetched";
  }
--
 async ngOnInit(): Promise<void> {
  await this.getAuthorization();
 }
 --
this.activatedRoute.params.subscribe(async (params: Params) => {
  await this.userRoleAcces(); 
})
------
 async pipe : the async pipe transforms an Observable into data. 

 it other option to:

 changedetectorref and markforcheck when changedetectionstrategy.onpush used.
 -------
 create a observables:

create
defer
empty
from
fromEvent
interval
of
range
throw
timer

of:
The Of creates the observable from the arguments that you pass into it. 

const array=[1,2,3,4,5,6,7]
  const obsof1=of(array);
  obsof1.subscribe(val => console.log(val),
           error=> console.log("error"),
          () => console.log("complete"))
 
}
**** Output ***
[1, 2, 3, 4, 5, 6, 7

from:
From Operator takes only one argument that can be iterated and converts it into an observable.

ngOnInit() {
 
    const array3 = [1, 2, 3, 4, 5, 6, 7]
    const obsfrom1 = from(array3);
    obsfrom1.subscribe(val => console.log(val),
      error => console.log("error"),
      () => console.log("complete"))
 
}
 
*** Output ****
1
2
3
4
5
6
7
 -------
 template driven form and reactive forms:

 ---------------------------------------------------------------
 Angular work flow:

 1. angular.json: 
 This file will contain all the configurations of the app. 
 While building the app, 
 the builder looks at this file to find the entry point of the application.

 the main property of the options object defines 
 the entry point of the application which in this case is main.ts.

 2.main.ts:
 creates a browser environment for the application to run, and, along with this, 
 it also calls a function called bootstrapModule, which bootstraps the application.

 AppModule is getting bootstrapped.

 3. app.module.ts
 This module contains declarations of all the components.

 AppComponent is getting bootstrapped.

 4, index.html
 After this, Angular calls the index.html file. 
 This file consequently calls the root component that is app-root.

 ---------------------------------------------------------------
 difference between AngularJS and Angular?
 architecture:
 angularjs - mvc
 angular - components and directives modules

 language:
 angularjs - javascript
 angular - typescript

 support:
 angularjs - desktop
 angular - mobile and desktop browser

 angular - support dependency injection
 angularjs - not
 ----------------------------------------------------------
 routing:

 create a module - AppRoutingModule
 ng new routing-app --routing --defaults

 Import the AppRoutingModule into AppModule and add it to the imports array.

 Import RouterModule and Routes into your routing module.

 Define your routes in your Routes array.


import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router'; // CLI imports router

const routes: Routes = [
  { path: 'first-component', component: FirstComponent },
  { path: 'second-component', component: SecondComponent },
];

// configures NgModule imports and exports
@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
---
<nav>
  <ul>
    <li><a routerLink="/first-component" routerLinkActive="active" ariaCurrentWhenActive="page">First Component</a></li>
    <li><a routerLink="/second-component" routerLinkActive="active" ariaCurrentWhenActive="page">Second Component</a></li>
  </ul>
</nav>
<!-- The routed views render in the <router-outlet>-->
<router-outlet></router-outlet>
-----
performance optimization:

Using AoT Compilation. ...
Using OnPush Change Detection Strategy. ...
Using Pure Pipes. ...
Unsubscribe from Observables. ...
Lazy Loading. ...
Use trackBy option for For Loop. ...
Avoid computation in template files. ...
Usage of Web Workers.
ngzone
--------------------
features of angular:

typescript
data binding
mvc architecture
dependency injection
-------
rxjs:
Reactive Extensions for JavaScript
RxJS is a library for reactive programming using observables that makes it easier to compose 
asynchronous or callback-based code. 

user to:
Converting existing code for async operations into observables
Iterating through the values in a stream
Mapping values to different types
Filtering streams
Composing multiple streams
-------------------------------------------
Deep copying objects in JavaScript :

1.
var newObj = JSON.parse(JSON.stringify(obj));

2.
Using Lo-Dash's _.cloneDeep 
var newObj = _.cloneDeep(obj);

3.
this.user = Object.assign({}, currentObject);
--------------
var / let / const:

var:
globally scoped or function/locally scoped.
var variables can be re-declared and updated

let:
block scoped
can be updated but not re-declared.

const:
block scoped
cannot be updated or re-declared
------------
core concepts:

https://medium.com/techmonks/angular-core-concepts-list-c337e3e84f5f

--------------