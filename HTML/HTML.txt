HTML Q & A::::

1. html and html5.
html5 gives semantic approach like <header><footer><nav>
multimedia elements - video and audio support.
graphics interaction like canvas and svg.
storage
create new elements.
new form elements: input types: email,date,range,number
new attributes: placeholder,required,autofocus,form.
new lements: datalist,output, progress, meter.

html5 features::::
simple doctype
media tags
semantic elements
storage elements
graphics elements



2. HTML5Shiv:
used to support html5 elements in old browsers(IE8).
all browsers, old and new, automatically handle unrecognized elements as inline elements.
<!--[if lt IE 9]>
  <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
<![endif]-->


3.	viewport:
browser will (probably) render the width of the page at the width of its own screen.
<meta name="viewport" content="width=device-width, initial-scale=1">
css:
@-ms-viewport{
  width: device-width;
}


4. <!DOCTYPE html>
it is an instruction to the web browser about what version of HTML the page is written in.

HTML 4.01 Strict
This DTD contains all HTML elements and attributes, 
but does NOT INCLUDE presentational or deprecated elements (like font). 
Framesets are not allowed.

HTML 4.01 Transitional
This DTD contains all HTML elements and attributes, 
INCLUDING presentational and deprecated elements (like font). 
Framesets are not allowed.

HTML 4.01 Frameset

This DTD is equal to HTML 4.01 Transitional, 
but allows the use of frameset content.
------------------------
5.

Inline elements:::
respect left & right margins and padding, but not top & bottom
cannot have a width and height set
allow other elements to sit to their left and right.


Block elements:::
respect all of those
force a line break after the block element

Inline-block elements:::
allow other elements to sit to their left and right
respect top & bottom margins and padding
respect height and width


--------------------------
6. Meta Tag- 
information about the data
not displayed in page. it will machine parsable.
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
•	UTF-8 - Character encoding for Unicode
<meta http-equiv="refresh" content="30">
-------------------------
7. DOM
When a web page is loaded, the browser creates a Document Object Model of the page.
The DOM defines a standard for accessing documents.

------------------------
8.

<canvas> element is used to draw graphics on a web page.
<canvas> element is only a container for graphics. You must use JavaScript to actually draw the graphics.
<canvas id="myCanvas" width="200" height="100"></canvas>
------------------------
types of layouts:
A static page layout (sometimes called a “fixed” layout or “fixed width” 
layout) uses a preset page size and does not change based on the browser
 width

A liquid page layout (sometimes called “fluid” or “fluid width”) uses 
relative units instead of fixed units. Typically a liquid layout will use 
percentages instead of pixels, 

An adaptive page layout uses CSS media queries to detect the width of the browser 
and alter the layout accordingly

A responsive page layout uses both relative units and media queries, 
ostensibly combining the ideas of a liquid layout and an adaptive layout.
-------------------------
HTML5 API::

With web storage, web applications can store data locally within the user's browser.
storage limit = 5MB

localStorage - stores data with no expiration date
localStorage.setItem("lastname", "Smith");
localStorage.getItem("lastname");
localStorage.removeItem("lastname");

sessionStorage - stores data for one session (data is lost when the browser tab is closed).
sessionStorage.setItem('key', 'value');

Name/value pairs are always stored as strings.
---------------------------
Cookies are primarily for server-side reading.
Size must be less than 4KB.

document.cookie = "username=John Doe";

-----------------------------------------------------------
APPLICATION CACHE:::

web application is cached, and accessible in offline mode(without an internet connection).
The manifest file is a simple text file that lists the resources the browser should cache for offline access.
A manifest can have three distinct sections: CACHE, NETWORK, and FALLBACK.
CACHE:Files listed under this header will be explicitly cached after they're downloaded for the first time.
NETWORK: Files listed in this section may come from the network if they aren't in the cache.
FALLBACK: An optional section specifying fallback pages if a resource is inaccessible. 

<html manifest="example.appcache">
  ...
</html>

---
SERVICE WORKERS:::
Caching Files with Service Worker::
The Service Worker can be used as a proxy for network events, allowing us to cache resources for offline use.

this.addEventListener('install', event => {
  event.waitUntil(
    // wait for the cache to be retrieved
    caches
      .open('resources') // Open a cache called 'resources'
      .then(cache => cache.addAll(['/styles.css', '/image.png'])) // Cache files for later retrieval
  );
});

// Listen for network requests
this.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request) // Respond with the cached content
  );
});

So Web Workers are handy to run expensive scripts without causing the user interface to freeze, 
while Service Workers are useful to modify the response from network requests (for example, when building an offline app).
-----------------------------
benefits of semantics elements

improve performance
improve maintainance
improve SEO.
------------------------------
WEB WORKER:: multi threading
JavaScript is single-threaded. Everything happens in the sequence it is written, line-by-line.

web worker is a JavaScript running in the background, without affecting the performance of the page.

w = new Worker("demo_workers.js");


if(window.Worker){
var myworker = new worker(worker.js);
var object = {adthis:{num1:1,num2:2}};
myworker.postMessage(object);
myworker.onmessage = fucntion(e){
console.log(e.data.result)
}
}


worker.js::

this.onmessage = function(e){
this.postMessage({result:e.data.addthis.num1 + e.data.addthis.num2})
}
---------------------------------
Attributes provide additional information about HTML elements.

src,alt,title,href,style,width,height.

Properties belong to DOM, the nature of DOM is an object in JavaScript.
document.getElementById('test').className = 'red';
--------------------
Adaptive web design is different from responsive design
there are several distinct layouts for multiple screen sizes. And the layout used depends on the screen size used.
--------------------
modernizer and polyfill:

MODERNIZZER: FEATURE DETECTION(WHETHER THIS FEATURE IS SUPPORT IN THIS BROWSER OR NOT)

POLYFILLS:(created all unsupported elements in javascript)

A polyfill is a browser fallback, made in JavaScript, that allows functionality you expect to work in modern browsers 
to work in older browsers, e.g., to support canvas (an HTML5 feature) in older browsers.
-----------------------
) What is BOM?

BOM stands for Browser Object Model. It provides interaction with the browser. 
The default object of browser is window.

More Details: Browser Object Model
) What is DOM? What is the use of document object?

DOM stands for Document Object Model. A document object represent the html document. 
It can be used to access and change the content of html.

More Details: Document Object Model
) What is the use of window object?

The window object is automatically created by the browser that represents a window of a browser.

It is used to display the popup dialog box such as alert dialog box, 
confirm dialog box, input dialog box etc.

More details...
) What is the use of history object?

The history object of browser can be used to switch to history pages such as back and 
forward from current page or another page. There are three methods of history object.

history.back()
history.forward()
history.go(number): number may be positive for forward, negative for backward.
--------------------------------
validation tag:

required,email, url, number,  tel, date.
----------------------------------
WEB SOCKET::

A WebSocket PROVIDES  bidirectiona; connection between the client and the server.
var Socket = new WebSocket(url, [protocal] );

open	Socket.onopen	This event occurs when socket connection is established.
message	Socket.onmessage	This event occurs when client receives data from server.
error	Socket.onerror	This event occurs when there is any error in communication.
close	Socket.onclose	This event occurs when connection is closed.




--------------
pie htc

PIE stands for Progressive Internet Explorer. 
It is an IE attached behavior which, when applied to an element, 
allows IE to recognize and display a number of CSS3 properties.
-----------------------------
CDN is short for content delivery network. A content delivery network (CDN) is a system of distributed servers (network) 
that deliver pages and other Web content to a user
--------------------------------
SVG is a language for describing 2D graphics in XML.

Canvas draws 2D graphics, on the fly (with a JavaScript).

SVG is XML based, which means that every element is available within the SVG DOM. You can attach JavaScript event handlers for an element.

SVG                                                Canvas
XML based    										javascript based
Support for event handlers							No support for event handlers
													You can save the resulting image as .png or .jpg
--------------------------------
<video width="320" height="240" controls>
  <source src="movie.mp4" type="video/mp4">
  <source src="movie.ogg" type="video/ogg">
Your browser does not support the video tag.
</video>

<audio controls>
  <source src="horse.ogg" type="audio/ogg">
  <source src="horse.mp3" type="audio/mpeg">
Your browser does not support the audio element.
</audio>

<iframe width="420" height="315"
src="https://www.youtube.com/embed/tgbNymZ7vqY">
</iframe>
<object width="420" height="315"
data="https://www.youtube.com/embed/tgbNymZ7vqY">
</object>
<embed width="420" height="315"
src="https://www.youtube.com/embed/tgbNymZ7vqY">
------------------------------
SSE:

A server-sent event is when a web page automatically gets updates from a server.
var source = new EventSource("demo_sse.php");
source.onmessage = function(event) {
    document.getElementById("result").innerHTML += event.data + "<br>";
};
--------------------------------
FORM VALIDATION:
HTML5:  email, url, number, tel, date ,color,
--------------
ARIA - SCREEN READER.
---------------
Table with responsive td.cell based on width
https://jsfiddle.net/victor_007/ywevz8ra/

https://jsfiddle.net/5ht73hpc/

--------------------------------------------------------
ACCessbility - ARIA
--------------------------------------
How html page parse and render in browser:

1. HTML parsing: 
converts html document into DOM tree.
Tokenization: the html is broken down into tokens(tags, attributes, text)
Tree construction: These tokens are  used to create DOM tree structure.

2. CSS parsing:
browser retrives and parse css files and styles, to create CSSOM tree.

DOM and CSSOM combined together to determine computed style of each node.

3. JS parsing:
If the HTML document contains <script> tage, broser parse and executes the js.

Blocking behaviour: 
script can block the html parsing depending on synchoronoua or async.
DOM manipulation:
js can modify DOM, CSSOM leading to changes in rendering process.

4. constructing the Render Tree:
Browser constructs the render tree by combining DOM and CSSOM tree.

5. Layout(Reflow):
The browser calculates the exact position and size of each element in the render tree. 
This process is also known as reflow.

6. Painting
The browser paints the content to the screen based on the render tree

7. Compositing
The layers are composited together to form the final visual output

Critical Rendering Path: The sequence of steps that the browser follows to 
convert HTML, CSS, and JavaScript into pixels on the screen. Optimizing the 
critical rendering path can significantly improve page load performance.
--------------------
improve the performance of html page.

1. use sprite images.
2. efficient resource loading.
   a. Place CSS <link> tags in the <head> to ensure styles are loaded and applied before rendering.
   b. Use async or defer attributes on script tags to prevent blocking the HTML parsing.
      <script scr="script,js" defer|async > </script>
  c. Use <link rel="preload"> to preload important resources like fonts, CSS, or critical scripts.

3. Optimize Images.
    a. use responsive images.
    b. lazy loading - loading="lazy"

4. avoid inline styles.
5. Optimize JavaScript Execution
    Code Splitting: Split JavaScript into smaller chunks and load them on demand.
    Tree Shaking: Remove unused JavaScript code during the build process.
6. 9. Optimize Fonts
   Use font-display: swap to display fallback fonts until the custom fonts are loaded.
   Subset Fonts: Use only the necessary font subsets to reduce font file sizes.
--------------------------------------
How to make HTML page more secure??

1. content security policy.
Implement a Content Security Policy to control which resources the browser is allowed to 
load for your site. This helps prevent cross-site scripting (XSS) attacks.

<meta
  http-equiv="Content-Security-Policy"
  content="default-src 'self'; img-src https://*; child-src 'none';" />

---

prevent XSS: cross site scripting

Cross-site scripting (XSS) is an attack in which an attacker injects malicious executable scripts 
into the code of a trusted application or website.

Stored XSS:  takes place when the malicious payload is stored in a database. 
It renders to other users when data is requested if there is no output encoding or sanitization.

Reflected XSS : through link or hyperlink actions

DOM-based XSS:  takes place when an attacker injects a script into a response. 
The attacker can read and manipulate the document object model (DOM) data to craft a malicious URL.
 The attacker uses this URL to trick a user into clicking it. If the user clicks the link, 
 the attacker can steal the user’s active session information, keystrokes, and so on.


 STEPS TO PRREVENT:
1, Never trust user input. Always perform input validation and sanitization on input.
2, Implement output encoding. This step is performed prior to writing user-controllable data. Output encoding escapes user input and ensures that the browser 
interprets it as benign data and not as code.
3. Use a Content Security Policy
4. set the HttpOnly flag for cookies. 
If you do, such cookies will not be accessible via client-side JavaScript.
 --------
 X-Content-Type-Options Header:

<meta http-equiv="X-Content-Type-Options" content="nosniff">
 Prevent the browser from interpreting files as a different MIME type than what is specified by the server.
---------
X-Frame-Options Header
Protect your site from clickjacking by controlling whether your site can be embedded in an iframe.

<meta http-equiv="X-Frame-Options" content="DENY">
-----------
Secure Cookies
Set the Secure and HttpOnly flags on cookies to ensure they are only sent over HTTPS and 
are inaccessible to JavaScript.

Set-Cookie: sessionId=abc123; Secure; HttpOnly
--
SameSite Cookies
Use the SameSite attribute for cookies to prevent CSRF attacks by restricting 
cookies to same-site requests.

Set-Cookie: sessionId=abc123; SameSite=Strict
---------------
Cross-Site Request Forgery (CSRF) Protection
Implement CSRF tokens in forms and AJAX requests to ensure requests are made intentionally 
by authenticated users.
----
7. Sanitize User Input
Always sanitize and validate user input to prevent XSS, SQL injection, and other injection attacks.
-----------
Input Validation and Output Encoding
------
HTTP Strict Transport Security (HSTS);
Enforce the use of HTTPS for your site, instructing browsers to always use HTTPS.
<meta http-equiv="Strict-Transport-Security" content="max-age=31536000; includeSubDomains">
--
CSP
XSS