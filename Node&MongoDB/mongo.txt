mongo db install:

community server download and install.
add path to env variables.
add data/db folder in c.

download and install mongodb shell to run mongo commands:
extract and place near mongodb folder.
add bin path in env variables.

restart the system.

mongod - to start server.
type: mongosh - to start commands
--------------------
show dbs

use newdbname - create new db.
db - to find current db name
--
insert a value:
db.collectionname.insertOne({name:"test"})
db.collectionname.insertMany([{name:"test"}])

to find value in collection:
db.collection.find()

update:
db.restaurant.updateOne(
      { "name" : "Central Perk Cafe" },
      { $set: { "violations" : 3 } }


------------------------

NODE WITH MONGODB:

npm i mongodb
--------------------------------------------------------------------
net ninja
Installation:

1. download and install mongodb community server in off. site.(enable mongodb compass - gui simulator)
2. download and install mongoshell 
3. type mongosh in command

collections and documents:

collections  - like table in sql
documents - json - like row record in sql

(we can work both in compass and command prompt).
---

show dbs - view databases
use db_name - switch to db
db - find current db name
show collections - view collenctions in db

insert a value:
db.collectionname.insertOne({name:"test"})
db.collectionname.insertMany([{name:"test"}])

to find all data in collection:
db.collection.find()

to filter:
db.collection.find({name:"name1"})

filter with specific data property:
db.collection.find({name:"name1"},{title:1,name:1})
----it show name and title val in filter collections

count:
db.collection.find().count();

sort::
db.collection.find().sort({title:1})
1 - asc
2 - desc

-------------------------
operators:

db.collection.find({review:{$gt:7}})
$gt
$lt - less than

$gte
$lte - less than equatl to

or - $or ====
db.collection.find({$or:[{rating:7},{name:"name1"}]})

in - nin (another way of or)
 db.collection.find({rating:{$in:[7,8,9]}}) similar to
 d.collection.find({$or:[{rating:7},{rating:8},{rating:9s}]})

not in:
db.collection.find({rating:{$nin:[7,8,9]}})

all:
db.books.find({generes:{$all:['fantacy','romance']}})

nested obj:
db.books.find({'review.name':'ss'})
-----------------
delete a document:

db.books.deleteOne({_id:ObjectId("653b79c4e07b078dc76dbed3"),'})
db.books.deleteMany({author:"test"})
--------------
update a document:

 db.books.updateOne({ _id: ObjectId("653b79dde07b078dc76dbed5")},{$set:{title:'book-update'}})

 increment:$inc
 db.books.updateOne({_id OnjetID("dddddd")},{$inc:{pages:2}})

 decrement: 
db.books.updateOne({_id OnjetID("dddddd")},{$inc:{pages:--2}})

pull: remove a element in array.
db.books.updateOne({_id OnjetID("dddddd")},{$pull:{generes:'romance'}})

push: add a element in array.
db.books.updateOne({_id OnjetID("dddddd")},{$push:{generes:'romance'}})

each : add a many element in array
db.books.updateOne({_id OnjetID("dddddd")},{$push:{generes:$each:['1','2']}})

---
db.collection.find({name:"name1"}).explain('executionStats')

give details report about the collection and datas.

docsExamined - retuns the search count of documents in the collection.
how many docs was examined to fetch the executed query.
----
Indexes:

reduce the number of documents search in a collection.
instead of search all documents in collection.

db.books.createIndex({rating:8})

dn.books.getIndexes();

db.books.dropIndex({rating:8})
