https://snack.expo.dev/@mobinni/focustime-demo
https://snack.expo.dev/@mobinni/focustime
https://snack.expo.dev/@mobinni/github.com-mobinni-mealstogo

https://www.freecodecamp.org/news/how-to-integrate-maps-in-react-native-using-react-native-maps-5745490fe055/
---------------------
import React from 'react';
import { Text, View } from 'react-native';

const YourApp = () => {
  return (
    <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
      <Text>
        Try editing me! ðŸŽ‰
      </Text>
    </View>
  );
}

export default YourApp;
------------------------------
import React,{useState} from 'react';
import { Text, View,StyleSheet } from 'react-native';

export default function YourApp(){
const[state1,state2]=useState(null);
  return (
    <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
      <Text>
        Try editing me! ðŸŽ‰
      </Text>
    </View>
  );
}

const styles = StyleSheet.create({
container:{flex:1,padding:50}
});
-----------remaining component--------
import React,{useState} from 'react';
import { Text, View,StyleSheet } from 'react-native';

export const child = () => {
  return (
    <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
      <Text>
        Try editing me! ðŸŽ‰
      </Text>
    </View>
  );
}

const styles = StyleSheet.create({
container:{flex:1,padding:50}
});
------------------------
child to parent:
event:
onPress={props.onClose}
onPressIn={()=>props.sentTakePic(takePic)}


parent to child:
value pass
sentTakePic={sentTakePic}
forwardref - call child event

----------------------

<View style={styles.buttonWrapper({ flex: 0.3 })}>
        {!isStarted ? (
          <RoundedButton title="start" onPress={() => setStarted(true)} />
        ) : (
          <RoundedButton title="pause" onPress={() => setStarted(false)} />
        )}
      </View>
	  
	  --------------------
	  child to parent
	  
	  <TouchableOpacity onPress={()=>props.onViewOrder(item.orderID)}>
	  
	  parent:
	  <NotificationComponent onViewOrder={onViewOrder}
	  const onViewOrder = (id) => {
	  
	  }
	  
	  ----------------------
	  
	  parent to child
	  
	  parent:::::
	  const child = useRef(null);
	  
	  <Child ref={child} />
	  onClick={() => child.current.printSomething()}
	  
	  const onAddMsg = (message) => {
	  child.current?.getAlert(message)
	  
	  }
	  
	  
	  child:::::::::::::
	  
	  //function ChatList(props) {
    export const ChatList = forwardRef((props, ref) => {
        //alert(props.message);
        const [addmsg, setaddmsg] = useState(false);
        const [chatData, setData] = useState(props.chatData);

        

        
        useImperativeHandle(ref, () => ({

            getAlert(msg) {
               alert(msg);
 //               setTimeout(() => {
                    const addData = [{
                        "orderNo": "General Message",
                        "time": "12:30 pm",
                        "msg": msg,
                        "chatView": [{
                                    "received": "",
                                    "sent": ""
                        }]
                    }];
                    
                data.unshift(addData[0]);
                console.log(data);
                //const 
                setData([...data]);
                
               
                   
 //               },100);
            }
        
          }));
	  
------------------------------------------------------------------------------------------------------------------
	  PARENT TO CHILD: 
	  
	  Putting it all together
      Child Component::::::::::::::::::::::::::::::::::

import React, { useImperativeHandle, forwardRef } from 'react';
import { View } from 'react-native'


const ChildComponent = (props, ref) => {
  useImperativeHandle(ref, () => ({
    // methods connected to `ref`
    sayHi: () => { sayHi() }
  }))
  // internal method
  const sayHi = () => {
    console.log("Hello")
  }
  return (
    <View />
  );
}

export default forwardRef(ChildComponent)

Parent Component:::::::::::::::::::::::::::::::::::::

import React, { useRef } from 'react';
import { Button, View } from 'react-native';
import ChildComponent from './components/ChildComponent';

const App = () => {
  const childRef = useRef()
  return (
    <View>
      <ChildComponent ref={childRef} />
      <Button
        onPress={() => {
          childRef.current.sayHi()
        }}
        title="Execute Child Method"
      />
    </View>
  )
}

export default App
	  ------------------------------------------------------------------------------------------------------------------
	  use state synchronous:
	  const [chatOrderId, setChatOrderId] = useState('General Message');
	  
	  setChatOrderId("ssss");
        console.log(chatOrderId); ////General Message
        const newChatData = chatData.find(item => item.orderNo == chatOrderId);
	  
	  useEffect(() => {
        doSomething(); // This is be executed when `loading` state changes
    }, [chatOrderId])
    const doSomething = (message) => {
console.log(chatOrderId); // ssss
    }
	  